#!/usr/bin/perl -w
use 5.010;
use strict;
use warnings;
use autodie;

use App::Exobrain;
use App::Exobrain::Cache;
use App::Exobrain::Intent::Beeminder;
use WebService::Beeminder;
use POSIX qw(tzset);

use constant DEBUG => 1;

my $exobrain = App::Exobrain->new;
my $bus = $exobrain->sub;
my $cache = App::Exobrain::Cache->new(namespace => $0);
my $tz = $exobrain->config->{General}{timezone};

if ($tz) {
    say "Setting timezone to $tz";
    $ENV{TZ} = $tz;     ## no critic RequireLocalizedPunctuationVars
    tzset();
}

my %inbox_goal = (
    'perltraining.com.au' => 'inbox',
);

while (1) {
    my $msg = $bus->get;

    if ($msg->namespace eq 'EMAIL') {

        my $data = $msg->data;

        warn "Looking at email msg\n" if DEBUG;

        # Only process INBOX states which we have goals
        # for...
        next unless $data->{mailbox} eq "INBOX";

        my $server = $data->{server};
        my $goal   = $inbox_goal{$server} or next;
        my $count  = $data->{count};
        my $key    = ['INBOX', $server];

        warn "$server has $count messages for $goal\n" if DEBUG;

        my $old_count = $cache->get($key);

        # If we don't have a count yet, or if our new count is
        # smaller, then cache it, and send it to beeminder!

        # Our cache expires at midnight, so we always push a
        # new measurement each day.

        if (! $old_count or $count < $old_count) {
            App::Exobrain::Intent::Beeminder->new(
                goal => $goal,
                value => $count,
                comment => "Submitted via exobrain",
            )->send_msg( $exobrain->pub->_socket);

            # TODO: Fix the awful syntax above. Surely intents
            # could just take an exobrain parameter?

            say "Updating beeminder goal $goal to $count msgs";

            $cache->set($key, $count, seconds_until_tomorrow());
        }
    }
}

sub seconds_until_tomorrow {
    my ($s, $m, $h) = localtime;
    return 86400 - ($h * 60 * 60) - ($m * 60) - $s;
}
